        def mvnCmd = "mvn -s ../configuration/cicd-settings-nexus3.xml"

        pipeline {
          agent {
            label 'maven'
          }
          stages {
            stage('Build App') {
              steps {
                git branch: 'segundo-exercicio-redhat', url: 'https://github.com/davidsf026/containerizacao-aplicacao.git'
                sh "cd helloworld && ${mvnCmd} install -Denforcer.skip=true -DskipTests=true"
              }
            }
            stage('Test') {
              steps {
                sh "cd helloworld && ${mvnCmd} test -Denforcer.skip=true"
              }
            }
            stage('Code Analysis') {
              steps {
                script {
                  sh "cd helloworld && ${mvnCmd} install sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -Denforcer.skip=true -DskipTests=true"
                }
              }
            }
            stage('Archive App') {
              steps {
                sh "cd helloworld && ${mvnCmd} deploy -Denforcer.skip=true -DskipTests=true"
              }
            }
            stage('Build Image') {
              steps {
                sh "cp helloworld/target/helloworld.war helloworld/target/ROOT.war"
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("bc", "tasks").startBuild("--from-file=helloworld/target/ROOT.war", "--wait=true")
                    }
                  }
                }
              }
            }
            stage('Deploy DEV') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
            stage('Promote to STAGE?') {
              agent {
                label 'skopeo'
              }
              steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }

                script {
                  openshift.withCluster() {
                    if (env.ENABLE_QUAY.toBoolean()) {
                      withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                        sh "skopeo copy docker://quay.io//tasks-app:latest docker://quay.io//tasks-app:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
                      }
                    } else {
                      openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage")
                    }
                  }
                }
              }
            }
            stage('Deploy STAGE') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.STAGE_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
          }
        }